1.what is software?what is softwareengneering?

===>The software can be termed as a collection of programs packed together in a meaningful format so that it works fine when the complete thing is put into execution. It cannot be touch or feel but can be seen while a user interacts with it. It helps users in communicating better with the hardware.

=>>The software can be categorized into 3 major types:
1.System Software

2.Application Software

3.Utility Software
=>1)System software is used for making your computer or PC presentable for using. It also deals with the tasks of managing the resources of the computer. Hence it has to run at the very base level of your computer. Hence it is called as Low-level software.

Example: of System software are:

1.Unix, Windows for PC
2.Android for Mobile
3.Compilers
4.Interpreters
5.Drivers
=>2)Application software can be termed as requirement based software developed for any explicit reason. This is actually a set of code or collection of instructions meant for end users. An application software can be abbreviated as an application also an app (more shortly). They are a self-contained set of instructions specifically meant for limited tasks. These types of software are usually made for users having requirement on any particular undertaking, such as opening any PDF document, or editing document, or making presentation files, or playing music, opening web-pages for surfing etc

Some common examples of Application Software are:

1.Word processing applications
2.Business applications
3.Music and Video players
4.Games for bars and cafes
5.Educational applications
6.Database maintenance software
7.Hospital or Medicine management systems etc

==>What is software engineering?
=Software Engineering - Definition, usage, and Best Practices
Software engineering has two parts: 
software and engineering. Software is a collection of codes, documents, and triggers that does a specific job and fills a specific requirement. Engineering is the development of products using best practices, principles, and methods.

2.Explain types of software?
==>The 3 types of computer software
This article discusses the differences between system, utility, and application software that can run on a computer.
1. System software:-

==>If you think of software as being in layers, the system software is the bottom layer: it sits between the hardware and the application software.

Operating systems like Windows, macOS, Android and iOS are examples of system software. Operating systems are loaded into RAM when the device starts up, and have access to the hard drive.

2. Utility software:-
=>Utility software is part of the system software and performs specific tasks to keep the computer running. Utility software is always running in the background. Examples of utility software are security and optimisation programs.

Security programs include anti-virus software that scans and removes viruses. Most computers will include some sort of anti-virus software, but you can add your own.

Optimisation programs can include tools for system clean-up, disk defragmentation, and file compression. These tools are typically installed as part of the operating system. They have access to the hard drive to keep it tidy.

3. Application software:-
=>This is everything else! Anything that is not an operating system or a utility is an application or app. So a word processor, spreadsheet, web browser, and graphics software are all examples of application software, and they can do many specific tasks.

You can remove and add applications on your computer using the operating system.

Application software like a word processor regularly directs the operating system to load and save files from and to the hard drive. When you are working on a file, it is saved temporarily in the RAM. It is only when you choose to save it that it is written to the hard drive.

This is why, if the computer crashes while you’re working on a file, you may lose any changes you didn’t save. Data stored in the RAM is volatile. The data is lost when the RAM loses power.

The operating system
Application software also uses the operating system to talk to the hardware on the computer and to other software. When a web browser wants to load a web page, it is the operating system that controls access to the internet and fetches the information from the web.

Similarly, the operating system also provides the application software information about what key is being pressed, and about the mouse: where it is, what it clicked, and where it’s moving on screen.

Application software relies heavily on the operating system to do these tasks and send it all this information.

3.what is SDLC? explain each phase of SDLC?
==>An SDLC (software development life cycle) is a big-picture breakdown of all the steps involved in software creation (planning, coding, testing, deploying, etc.). Companies define custom SDLCs to create a predictable, iterative framework that guides the team through all major stages of development.
Stage 1: Project Planning. ...
Stage 2: Gathering Requirements & Analysis. ...
Stage 3: Design. ...
Stage 4: Coding or Implementation. ...
Stage 5: Testing. ...
Stage 6: Deployment. ...
Stage 7: Maintenance.
 
#1) Requirement Gathering and Analysis:-
During this phase, all the relevant information is collected from the customer to develop a product as per their expectation. Any ambiguities must be resolved in this phase only.

Business analyst and Project Manager set up a meeting with the customer to gather all the information like what the customer wants to build, who will be the end-user, what is the purpose of the product. Before building a product a core understanding or knowledge of the product is very important.

For Example, A customer wants to have an application which involves money transactions. In this case, the requirement has to be clear like what kind of transactions will be done, how it will be done, in which currency it will be done, etc.

Once the requirement gathering is done, an analysis is done to check the feasibility of the development of a product. In case of any ambiguity, a call is set up for further discussion.

Once the requirement is clearly understood, the SRS (Software Requirement Specification) document is created. This document should be thoroughly understood by the developers and also should be reviewed by the customer for future reference.

#2) Design:-
In this phase, the requirement gathered in the SRS document is used as an input and software architecture that is used for implementing system development is derived.

#3) Implementation or Coding:-
Implementation/Coding starts once the developer gets the Design document. The Software design is translated into source code. All the components of the software are implemented in this phase.

#4) Testing:-
Testing starts once the coding is complete and the modules are released for testing. In this phase, the developed software is tested thoroughly and any defects found are assigned to developers to get them fixed.

Retesting, regression testing is done until the point at which the software is as per the customer’s expectation. Testers refer SRS document to make sure that the software is as per the customer’s standard.

#5) Deployment:-
Once the product is tested, it is deployed in the production environment or first UAT (User Acceptance testing) is done depending on the customer expectation.

In the case of UAT, a replica of the production environment is created and the customer along with the developers does the testing. If the customer finds the application as expected, then sign off is provided by the customer to go live.

#6) Maintenance:-

After the deployment of a product on the production environment, maintenance of the product i.e. if any issue comes up and needs to be fixed or any enhancement is to be done is taken care by the developers.